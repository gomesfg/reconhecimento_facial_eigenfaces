# -*- coding: utf-8 -*-
"""Trabalho Final - Aprendizado Não Supervisionado.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l5WzfK8jTH2sR-Mf7C1jazBrHGIlVx0O
"""

# Aluno: Felipe Eduardo Gomes
# Pós-Graduação Data Science - Turma 2 - FURB

import cv2
import os
import numpy as np
import random

### TREINAMENTO
faces_treino = []
ids_treino = []
faces_teste = []
ids_teste= []
indice_treino = 7 # Treino 70%

def buscarImagem():

    # Diretório com as fotos  
    caminhos = [os.path.join('Fotos', f) for f in os.listdir('Fotos')]

    # Embaralhar as imagens
    random.shuffle(caminhos)

    for caminhosImagem in caminhos:
        imagemFace = cv2.cvtColor(cv2.imread(caminhosImagem), cv2.COLOR_BGR2GRAY)
        id = int(os.path.split(caminhosImagem)[-1].split('_')[1].split('.')[0])
        #print(id)

        # Montar lista de treino 70% e teste 30%
        if ids_treino.count(id) < indice_treino:
             ids_treino.append(id)
             faces_treino.append(imagemFace)
        else :
             ids_teste.append(id)
             faces_teste.append(imagemFace)

    return np.array(ids_treino), faces_treino, np.array(ids_teste), faces_teste

ids_treino, faces_treino, ids_teste, faces_teste  = buscarImagem()

print("Treinando....")

for k in range(10, 21, 1):
  eigen = cv2.face.EigenFaceRecognizer_create(k)

  eigen.train(faces_treino, ids_treino)
  eigen.write('classificadorEigen_'+str(k)+'.yml')

print("Treinamento concluído ...")

### RECONHECENDO
for k in range(10, 21, 1):
 
  total_acertos = 0
  percentual_acerto = 0.0
  i = 0

  detector_face = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

  reconhecedor_face = cv2.face.EigenFaceRecognizer_create()
  reconhecedor_face.read("classificadorEigen_"+str(k)+".yml")

  for imagem_teste in faces_teste:
    faces_detectadas = detector_face.detectMultiScale(imagem_teste)
    for (x, y, l, a) in faces_detectadas:
      id_previsto, confianca = reconhecedor_face.predict(imagem_teste)
      id_atual = ids_teste[i]
      if id_previsto == id_atual:
        #print("Acertou a predição. Id Previsto: "+str(id_previsto)+" -> Id da foto: "+str(id_atual))
        total_acertos += 1
    i += 1
  percentual_acerto = (total_acertos / len(ids_teste)) * 100
  print(str(k) + " componentes principais, acurácia: " + str(percentual_acerto) +"%")